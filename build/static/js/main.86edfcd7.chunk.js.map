{"version":3,"sources":["components/Header.js","constants/index.js","components/ConfirmRemovalModal.js","components/NewListForm.js","components/NewListModal.js","components/TodoList.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","API_URL","ConfirmRemovalModal","state","modal","toggle","setState","previous","deleteList","id","axios","delete","then","props","resetState","Button","color","onClick","Modal","isOpen","this","ModalHeader","ModalFooter","type","NewListForm","user","item","duedate","onChange","e","console","log","target","name","value","createList","preventDefault","post","editList","put","defaultIfEmpty","list","Form","onSubmit","FormGroup","Label","for","Input","React","NewListModal","create","title","button","style","minWidth","ModalBody","TodoList","lists","Table","dark","length","colSpan","align","map","key","Home","getLists","get","res","data","Container","marginTop","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86edfcd7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h1>Do more shit.</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","export const API_URL = \"http://localhost:8000/api/todo_list/\";\n","import React, { Component, Fragment } from \"react\";\nimport { Modal, ModalHeader, Button, ModalFooter } from \"reactstrap\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass ConfirmRemovalModal extends Component {\n  state = {\n    modal: false\n  };\n\n  toggle = () => {\n    this.setState(previous => ({\n      modal: !previous.modal\n    }));\n  };\n\n  deleteList = id => {\n    axios.delete(API_URL + id).then(() => {\n      this.props.resetState();\n      this.toggle();\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Button color=\"danger\" onClick={() => this.toggle()}>\n          Remove\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>\n            Do you really wanna delete the list?\n          </ModalHeader>\n\n          <ModalFooter>\n            <Button type=\"button\" onClick={() => this.toggle()}>\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              onClick={() => this.deleteList(this.props.id)}\n            >\n              Yes\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nexport default ConfirmRemovalModal;\n","import React from \"react\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass NewListForm extends React.Component {\n  state = {\n    id: 0,\n    user: \"\",\n    item: \"\",\n    duedate: \"\",\n  };\n\n  componentDidMount() {\n    if (this.props.list) {\n      const { id, user, item, duedate} = this.props.list;\n      this.setState({ id, user, item, duedate});\n    }\n  }\n\n  onChange = e => {\n    console.log(e)\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  createList = e => {\n    e.preventDefault();\n    axios.post(API_URL, this.state).then(() => {\n      this.props.resetState();\n      this.props.toggle();\n    });\n  };\n\n  editList = e => {\n    e.preventDefault();\n    axios.put(API_URL + this.state.id, this.state).then(() => {\n      this.props.resetState();\n      this.props.toggle();\n    });\n  };\n\n  defaultIfEmpty = value => {\n    return value === \"\" ? \"\" : value;\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.props.list ? this.editList : this.createList}>\n        <FormGroup>\n          <Label for=\"item\">Task:</Label>\n          <Input\n            type=\"text\"\n            name=\"item\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.item)}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"duedate\">Due Date:</Label>\n          <Input\n            type=\"date\"\n            name=\"duedate\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.duedate)}\n          />\n        </FormGroup>\n        <Button>Send</Button>\n      </Form>\n    );\n  }\n}\n\nexport default NewListForm;\n","import React, { Component, Fragment } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport NewListForm from \"./NewListForm\";\n\nclass NewListModal extends Component {\n  state = {\n    modal: false\n  };\n\n  toggle = () => {\n    this.setState(previous => ({\n      modal: !previous.modal\n    }));\n  };\n\n  render() {\n    const create = this.props.create;\n\n    var title = \"Editing List\";\n    var button = <Button onClick={this.toggle}>Edit</Button>;\n    if (create) {\n      title = \"Creating New List\";\n\n      button = (\n        <Button\n          color=\"primary\"\n          className=\"float-right\"\n          onClick={this.toggle}\n          style={{ minWidth: \"200px\" }}\n        >\n          Create New\n        </Button>\n      );\n    }\n\n    return (\n      <Fragment>\n        {button}\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\n\n          <ModalBody>\n            <NewListForm\n              resetState={this.props.resetState}\n              toggle={this.toggle}\n              list={this.props.list}\n            />\n          </ModalBody>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nexport default NewListModal;\n","import React, { Component } from \"react\";\nimport { Table } from \"reactstrap\";\n\nimport ConfirmRemovalModal from \"./ConfirmRemovalModal\";\nimport NewListModal from \"./NewListModal\";\n\nclass TodoList extends Component {\n  render() {\n    const lists = this.props.lists;\n    return (\n      <Table dark>\n        <thead>\n          <tr>\n            <th>User</th>\n            <th>Task</th>\n            <th>Due Date</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {!lists || lists.length <= 0 ? (\n            <tr>\n              <td colSpan=\"6\" align=\"center\">\n                <b>Oops, no one here yet</b>\n              </td>\n            </tr>\n          ) : (\n            lists.map(list => (\n              <tr key={list.id}>\n                <td>{list.user}</td>\n                <td>{list.item}</td>\n                <td>{list.duedate}</td>\n                <td align=\"center\">\n                  <NewListModal\n                    create={false}\n                    list={list}\n                    resetState={this.props.resetState}\n                  />\n                  &nbsp;&nbsp;\n                  <ConfirmRemovalModal\n                    id={list.id}\n                    resetState={this.props.resetState}\n                  />\n                </td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport TodoList from \"./TodoList\";\nimport NewListModal from \"./NewListModal\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass Home extends Component {\n  state = {\n    lists: []\n  };\n\n  componentDidMount() {\n    this.resetState();\n  }\n\n  getLists = () => {\n    axios.get(API_URL).then(res => this.setState({ lists: res.data }));\n  };\n\n  resetState = () => {\n    this.getLists();\n  };\n\n  render() {\n    return (\n      <Container style={{ marginTop: \"20px\" }}>\n        <Row>\n          <Col>\n            <TodoList\n              lists={this.state.lists}\n              resetState={this.resetState}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <NewListModal create={true} resetState={this.resetState} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component, Fragment } from 'react';\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <Home />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}